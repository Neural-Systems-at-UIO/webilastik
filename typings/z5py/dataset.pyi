"""
This type stub file was generated by pyright.
"""

from . import _z5py

AVAILABLE_COMPRESSORS = _z5py.get_available_codecs()
COMPRESSORS_ZARR = ('raw', 'blosc', 'zlib', 'bzip2', 'gzip')
COMPRESSORS_N5 = ('raw', 'blosc', 'gzip', 'bzip2', 'xz', 'lz4')
class Dataset:
    """ Dataset for access to data on disc.

    Should not be instantiated directly, but rather
    be created or opened via ``create_dataset``, ``require_dataset`` or
    the ``[]`` operator of File or Group.
    """
    _dtype_dict = ...
    compressors_zarr = ...
    zarr_default_compressor = ...
    compressors_n5 = ...
    n5_default_compressor = ...
    def __init__(self, dset_impl, handle, parent, name, n_threads=...) -> None:
        ...
    
    def __array__(self, dtype=...):
        """ Create a numpy array containing the whole dataset.

        NOTE: Datasets are not interchangeble with arrays!
        Every time this method is called the whole dataset is loaded into memory!
        """
        ...
    
    @property
    def is_zarr(self):
        """ Flag to indicate zarr or n5 format of this dataset.
        """
        ...
    
    @property
    def attrs(self):
        """ The ``AttributeManager`` of this dataset.
        """
        ...
    
    @property
    def shape(self):
        """ Shape of this dataset.
        """
        ...
    
    @property
    def ndim(self):
        """ Number of dimensions of this dataset.
        """
        ...
    
    @property
    def size(self):
        """ Size (total number of elements) of this dataset.
        """
        ...
    
    @property
    def chunks(self):
        """ Chunks of this dataset.
        """
        ...
    
    @property
    def dtype(self):
        """ Datatype of this dataset.
        """
        ...
    
    @property
    def chunks_per_dimension(self):
        """ Number of chunks in each dimension of this dataset.
        """
        ...
    
    @property
    def number_of_chunks(self):
        """ Total number of chunks of this dataset.
        """
        ...
    
    @property
    def compression(self):
        ...
    
    @property
    def compression_opts(self):
        """ Compression library options of this dataset.
        """
        ...
    
    @property
    def parent(self):
        ...
    
    @property
    def name(self):
        ...
    
    @property
    def file(self):
        ...
    
    def __len__(self):
        ...
    
    def index_to_roi(self, index):
        """ Convert index to region of interest.

        Convert an index, which can be a slice or a tuple of slices / ellipsis to a
        region of interest. The roi consists of the region offset and the region shape.

        Args:
            index (slice or tuple): index into dataset.

        Returns:
            tuple: offset of the region of interest.
            tuple: shape of the region of interest.
            tuple: which dimensions should be squeezed out
        """
        ...
    
    def __getitem__(self, index):
        ...
    
    def __setitem__(self, index, item):
        ...
    
    def read_direct(self, dest, source_sel=..., dest_sel=...):
        """ Wrapper to improve similarity to h5py. Reads from the dataset to ``dest``, using ``read_subarray``.

        Args:
            dest (array) destination object into which the read data is written to.
            dest_sel (slice array) selection of data to write to ``dest``. Defaults to the whole range of ``dest``.
            source_sel (slice array) selection in dataset to read from. Defaults to the whole range of the dataset.
        Spaces, defined by ``source_sel`` and ``dest_sel`` must be in the same size but dont need to have the same
        offset
        """
        ...
    
    def write_direct(self, source, source_sel=..., dest_sel=...):
        """ Wrapper to improve similarity to h5py. Writes to the dataset from ``source``, using ``write_subarray``.

        Args:
            source (array) source object from which the written data is obtained.
            source_sel (slice array) selection of data to write from ``source``. Defaults to the whole range of
            ``source``.
            dest_sel (slice array) selection in dataset to write to. Defaults to the whole range of the dataset.
        Spaces, defined by ``source_sel`` and ``dest_sel`` must be in the same size but dont need to have the same
        offset
        """
        ...
    
    def write_subarray(self, start, data):
        """ Write subarray to dataset.

        ``data`` is written to region of interest, defined by ``start``
        and the shape of ``data``. The region of interest must be in
        bounds of the dataset and the datatype must agree with the dataset.

        Args:
            start (tuple): offset of the roi to write.
            data (np.ndarray): data to write; shape determines the roi shape.
        """
        ...
    
    def read_subarray(self, start, stop):
        """ Read subarray from region of interest.

        Region of interest is defined by ``start`` and ``stop``
        and must be in bounds of the dataset.

        Args:
            start (tuple): start coordinates of the roi.
            stop (tuple): stop coordinates of the roi.

        Returns:
            np.ndarray
        """
        ...
    
    def chunk_exists(self, chunk_indices):
        """ Check if chunk has data.

        Check for the given indices if the chunk has data.

        Args:
            chunk_indices (tuple): chunk indices.

        Returns:
            bool
        """
        ...
    
    def write_chunk(self, chunk_indices, data, varlen=...):
        """ Write single chunk

        Args:
            chunk_indices (tuple): indices of the chunk to write to
            data (np.ndarray): data to be written
            varlen (bool): write this chunk in varlen mode; only supported in n5
                (default: False)
        """
        ...
    
    def read_chunk(self, chunk_indices):
        """ Read single chunk

        Args:
            chunk_indices (tuple): indices of the chunk to write to
        Returns
            np.ndarray or None - chunk data, returns None if the chunk is empty
        """
        ...
    
    def get_chunk_shape(self, chunk_indices, from_header=...):
        """ Get the shape of chunk.

        This returns the actual chunk shape, which can be different
        from self.chunks for border chunks.

        Args:
            chunk_indices (tuple): indices of the chunk to write to
            from_header (bool): whether to read the chunk shape from the
                chunk header (only applicable for n5 format). (default: False)
        Returns:
            tuple - shape of the chunk
        """
        ...
    


