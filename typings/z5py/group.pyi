"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from typing import Union, Optional, Tuple
from h5py._hl.dataset import Dataset

import numpy as np


class Group(Mapping):
    """ Group inside of a z5py container.

    Corresponds to a directory on the filesystem or object in cloud storage.
    Supports python dict api.
    Should not be instantiated directly, but rather be created
    or opened via the `create_group`, `require_group` or `[]` operators
    of `z5py.Group` or `z5py.File`.
    """
    file_modes = ...
    def __init__(self, handle, handle_factory, parent, name) -> None:
        ...

    def __iter__(self):
        ...

    def __len__(self):
        ...

    def __contains__(self, name):
        ...

    def __delitem__(self, name):
        ...

    def __getitem__(self, name):
        """ Access group or dataset in the container.

        Fails if no dataset or group of the specified name exists.

        Args:
            name (str): name of group or dataset in container.

        Returns:
            ``Group`` or ``Dataset``.
        """
        ...

    @property
    def attrs(self):
        """ Access additional attributes.

        Returns:
            ``AttributeManager``.
        """
        ...

    @property
    def is_zarr(self):
        ...

    @property
    def parent(self):
        ...

    @property
    def name(self):
        ...

    @property
    def file(self):
        ...

    def is_sub_group(self, name):
        ...

    def create_group(self, name):
        """ Create a new group.

        Create new (sub-)group of the group.
        Fails if a group of this name already exists.

        Args:
            name (str): name of the new group.

        Returns:
            ``Group``: group of the requested name.
        """
        ...

    def require_group(self, name):
        """ Require group.

        Require that a group of the given name exists.
        The group will be created if it does not already exist.

        Args:
            name (str): name of the required group.

        Returns:
            ``Group``: group of the requested name.
        """
        ...

    def create_dataset(
        self,
        name: str,
        shape: Optional[Tuple[int, ...]] = None,
        dtype: Union[str, np.dtype, None] = None,
        data: Optional[np.ndarray] = None,
        chunks: Optional[Tuple[int, ...]] = None,
        compression: Optional[str] = None,
        fillvalue: float = 0,
        n_threads: int = 1,
        # **compression_options
    ) -> Dataset:
        """ Create a new dataset.

        Create a new dataset in the group. Syntax and behaviour similar to the
        corresponding ``h5py`` functionality.
        In contrast to ``h5py``, there is no option to store a dataset without chunking
        (if no chunks are given default values, suitable for the dimension of the dataset, will be used).
        Also, if a dataset is created with data and a dtype that is different
        from the data's is specified, the function throws a RuntimeError, instead
        of converting the data.

        Args:
            name (str): name of the new dataset.
            shape (tuple): shape of the new dataset. If no shape is given,
                the ``data`` argument must be given. (default: None).
            dtype (str or np.dtpye): datatype of the new dataset. If no dtype is given,
                the ``data`` argument must be given (default: None).
            data (np.ndarray): data used to infer shape, dtype and fill the dataset
                upon creation (default: None).
            chunks (tuple): chunk sizes of the new dataset. If no chunks are given,
                a suitable default value for the number of dimensions will be used (default: None).
            compression (str): name of the compression library used to compress chunks.
                If no compression is given, the default for the current format is used (default: None).
            fillvalue (float): fillvalue for empty chunks (only zarr) (default: 0).
            n_threads (int): number of threads used for chunk I/O (default: 1).
            **compression_options: options for the compression library.

        Returns:
            ``Dataset``: the new dataset.
        """
        ...

    def require_dataset(self, name, shape, dtype=..., chunks=..., n_threads=..., **kwargs):
        """ Require dataset.

        Require dataset in the group.
        Will create the dataset if it does not exist, otherwise returns
        existing dataset. If the dataset already exists, consistency with the
        arguments ``shape``, ``dtype`` (if given) and ``chunks`` (if given) is enforced.

        Args:
            name (str): name of the dataset.
            shape (tuple): shape of the dataset.
            dtype (str or np.dtpye): datatype of dataset (default: None).
            chunks (tuple): chunk sizes of the dataset (default: None).
            n_threads (int): number of threads used for chunk I/O (default: 1).
            **kwargs: additional arguments that will only be used for creation
                if the dataset does not exist.

        Returns:
            ``Dataset``: the required dataset.
        """
        ...

    def visititems(self, func, _root=...):
        """ Recursively visit names and objects in this group.

        You supply a callable (function, method or callable object); it
        will be called exactly once for each link in this group and every
        group below it. Your callable must conform to the signature:

            func(<member name>, <object>) => <None or return value>

        Returning None continues iteration, returning anything else stops
        and immediately returns that value from the visit method.  No
        particular order of iteration within groups is guranteed.

        calls the function @param func with the found items, appended to @param path

        Example:

        # Get a list of all datasets in the file
        >>> mylist = []
        >>> def func(name, obj):
        ...     if isinstance(obj, Dataset):
        ...         mylist.append(name)
        ...
        >>> f = File('foo.n5')
        >>> f.visititems(func)
        """
        ...
