import enum
from typing import Any, List

def ChunkedArrayCompressed(shape, compression = ..., dtype = ..., chunk_shape = ...,
cache_max = ..., fill_value = ..., axistags = ...) -> Any: ...
def ChunkedArrayFull(shape, dtype = ..., fill_value = ..., axistags = ...) -> Any: ...
def ChunkedArrayHDF5(file, dataset_name, shape = ..., dtype = ...,
mode = ..., compression = ...,
chunk_shape = ..., cache_max = ..., fill_value = ..., axistags = ...) -> Any: ...
def ChunkedArrayLazy(shape, dtype = ..., chunk_shape = ..., fill_value = ..., axistags = ...) -> Any: ...
def ChunkedArrayTmpFile(shape, dtype = ..., chunk_shape = ..., cache_max = ...,
path, fill_value = ..., axistags = ...) -> Any: ...
def checksum(boost) -> Any: ...
def constructArrayFromAxistags(*args, **kwargs) -> Any: ...

class AxisInfo:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def compatible(axisinfo2) -> Any: ...
    @classmethod
    def fromFrequencyDomain(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isAngular(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isChannel(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isEdge(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isFrequency(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isSpatial(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isTemporal(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isType(axistype) -> Any: ...
    @classmethod
    def toFrequencyDomain(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __copy__(self) -> Any: ...
    @classmethod
    def __deepcopy__(self) -> Any: ...
    @classmethod
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __ge__(self, other) -> Any: ...
    @classmethod
    def __gt__(self, other) -> Any: ...
    @classmethod
    def __le__(self, other) -> Any: ...
    @classmethod
    def __lt__(self, other) -> Any: ...
    @classmethod
    def __ne__(self, other) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def c(self) -> Any: ...
    @property
    def description(self) -> Any: ...
    @description.setter
    def description(self, val: Any) -> None: ...
    @property
    def e(self) -> Any: ...
    @property
    def ft(self) -> Any: ...
    @property
    def fx(self) -> Any: ...
    @property
    def fy(self) -> Any: ...
    @property
    def fz(self) -> Any: ...
    @property
    def key(self) -> Any: ...
    @property
    def n(self) -> Any: ...
    @property
    def resolution(self) -> Any: ...
    @resolution.setter
    def resolution(self, val: Any) -> None: ...
    @property
    def t(self) -> Any: ...
    @property
    def typeFlags(self) -> Any: ...
    @property
    def x(self) -> Any: ...
    @property
    def y(self) -> Any: ...
    @property
    def z(self) -> Any: ...

class AxisTags:
    __reduce__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def axisTypeCount(types) -> int: ...
    @classmethod
    def compatible(self, *args, **kwargs) -> Any: ...
    @classmethod
    def description(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dropChannelAxis(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromFrequencyDomain(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromJSON(self, value: str) -> "AxisTags": ...
    @classmethod
    def index(self, *args, **kwargs) -> Any: ...
    @classmethod
    def insert(self, *args, **kwargs) -> Any: ...
    @classmethod
    def insertChannelAxis(self, *args, **kwargs) -> Any: ...
    @classmethod
    def keys(self) -> List[str]: ...
    @classmethod
    def permutationFromNormalOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationFromNumpyOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationFromVigraOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationToNormalOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationToNumpyOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationToOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def permutationToVigraOrder(self, *args, **kwargs) -> Any: ...
    @classmethod
    def resolution(self, *args, **kwargs) -> Any: ...
    @classmethod
    def scaleResolution(self, *args, **kwargs) -> Any: ...
    @classmethod
    def setChannelDescription(self, *args, **kwargs) -> Any: ...
    @classmethod
    def setDescription(self, *args, **kwargs) -> Any: ...
    @classmethod
    def setResolution(self, *args, **kwargs) -> Any: ...
    @classmethod
    def swapaxes(self, *args, **kwargs) -> Any: ...
    @classmethod
    def toFrequencyDomain(self, *args, **kwargs) -> Any: ...
    @classmethod
    def toJSON(self) -> str: ...
    @classmethod
    def transform(self, *args, **kwargs) -> Any: ...
    @classmethod
    def transpose(self, *args, **kwargs) -> Any: ...
    @classmethod
    def values(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __copy__(self) -> Any: ...
    @classmethod
    def __deepcopy__(self) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __ne__(self, other) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
    @property
    def channelIndex(self) -> Any: ...
    @property
    def innerNonchannelIndex(self) -> Any: ...



class AxisType(enum.Enum):
    AllAxes: Any = ...
    Angle: Any = ...
    Channels: Any = ...
    Edge: Any = ...
    Frequency: Any = ...
    NonChannel: Any = ...
    Space: Any = ...
    Time: Any = ...
    UnknownAxisType: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class ChunkedArrayBase:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def checkoutSubarray(start, stop, res = ...) -> Any: ...
    @classmethod
    def commitSubarray(start, array) -> Any: ...
    @classmethod
    def releaseChunks(start, stop, destroy = ...) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
    @property
    def backend(self) -> Any: ...
    @property
    def cache_max_size(self) -> Any: ...
    @cache_max_size.setter
    def cache_max_size(self, val: Any) -> None: ...
    @property
    def chunk_array_shape(self) -> Any: ...
    @property
    def chunk_shape(self) -> Any: ...
    @property
    def data_bytes(self) -> Any: ...
    @property
    def data_bytes_per_chunk(self) -> Any: ...
    @property
    def dtype(self) -> Any: ...
    @property
    def ndim(self) -> Any: ...
    @property
    def overhead_bytes(self) -> Any: ...
    @property
    def overhead_bytes_per_chunk(self) -> Any: ...
    @property
    def read_only(self) -> Any: ...
    @property
    def shape(self) -> Any: ...
    @property
    def size(self) -> Any: ...

class ChunkedArrayHDF5Base(ChunkedArrayBase):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def close(self, *args, **kwargs) -> Any: ...
    @classmethod
    def flush(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def dataset_name(self) -> Any: ...
    @property
    def filename(self) -> Any: ...
    @property
    def readonly(self) -> Any: ...

class Compression(enum.Enum):
    LZ4: Any = ...
    ZLIB: Any = ...
    ZLIB_BEST: Any = ...
    ZLIB_FAST: Any = ...
    ZLIB_NONE: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class HDF5Mode(enum.Enum):
    Default: Any = ...
    New: Any = ...
    ReadOnly: Any = ...
    ReadWrite: Any = ...
    Replace: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...
