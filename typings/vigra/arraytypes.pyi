import numpy
from typing import Any, Optional
from vigra.vigranumpycore import AxisInfo as AxisInfo, AxisTags as AxisTags, AxisType as AxisType

buffer = memoryview
xrange = range

class classproperty:
    def __get__(self, instance: Any, cls: Any): ...
    def __init__(self, class_method: Any, instance_method: Optional[Any] = ...) -> None: ...

def newaxis(axisinfo: Any = ...): ...
def makeAxistags(spec: Any, order: Optional[Any] = ..., noChannels: Optional[Any] = ...): ...
def taggedView(array: Any, axistags: str = ..., force: bool = ..., order: Optional[Any] = ..., noChannels: bool = ...): ...
def dropChannelAxis(array: Any): ...
def _AxisTags__reduce__(self): ...

class VigraArray(numpy.ndarray):
    def defaultOrder(cls): ...
    @staticmethod
    def defaultAxistags(tagSpec: Any, order: Optional[Any] = ..., noChannels: bool = ...): ...
    def __new__(cls, obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
    __array_priority__: float = ...
    axistags: Any = ...
    def __array_finalize__(self, obj: Any) -> None: ...
    def __copy__(self, order: str = ...): ...
    def __deepcopy__(self, memo: Any): ...
    def __reduce__(self): ...
    @staticmethod
    def receiveSocket(socket: Any, flags: int = ..., copy: bool = ..., track: bool = ...): ...
    def writeImage(self, filename: Any, dtype: str = ..., compression: str = ..., mode: str = ...) -> None: ...
    def writeSlices(self, filename_base: Any, filename_ext: Any, dtype: str = ..., compression: str = ...) -> None: ...
    def writeHDF5(self, filenameOurGroup: Any, pathInFile: Any) -> None: ...
    def sendSocket(self, socket: Any, flags: int = ..., copy: bool = ..., track: bool = ...): ...
    def imshow(self): ...
    def show(self, normalize: bool = ...): ...
    def qimage(self, normalize: bool = ...): ...
    def asRGB(self, normalize: bool = ...): ...
    def copyValues(self, other: Any) -> None: ...
    @property
    def channelIndex(self): ...
    @property
    def innerNonchannelIndex(self): ...
    @property
    def channels(self): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def depth(self): ...
    @property
    def duration(self): ...
    @property
    def spatialDimensions(self): ...
    def iterImpl(self, type: Any): ...
    def channelIter(self): ...
    def spaceIter(self): ...
    def timeIter(self): ...
    def sliceIter(self, key: str = ...) -> None: ...
    def bindAxis(self, which: Any, index: int = ...): ...
    def dropChannelAxis(self, ignoreMultiChannel: bool = ...): ...
    def insertChannelAxis(self, order: Optional[Any] = ...): ...
    def noTags(self): ...
    def withAxes(self, *axistags: Any, **kw: Any): ...
    def view5D(self, order: str = ...): ...
    def permutationToOrder(self, order: Any): ...
    def permutationToNormalOrder(self, types: Any = ...): ...
    def permutationFromNormalOrder(self): ...
    def permutationToNumpyOrder(self): ...
    def permutationFromNumpyOrder(self): ...
    def permutationToVigraOrder(self): ...
    def permutationFromVigraOrder(self): ...
    def transposeToOrder(self, order: Any): ...
    def transposeToDefaultOrder(self): ...
    def transposeToNormalOrder(self): ...
    def transposeToVigraOrder(self): ...
    def transposeToNumpyOrder(self): ...
    @property
    def T(self): ...
    def __getitem__(self, index: Any): ...
    def subarray(self, p1: Any, p2: Optional[Any] = ...): ...
    def all(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def any(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def argmax(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def argmin(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def copy(self, order: str = ...): ...
    def cumprod(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def cumsum(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ...): ...
    @property
    def flat(self): ...
    def flatten(self, order: str = ...): ...
    def max(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def mean(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def min(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def nonzero(self): ...
    @property
    def order(self): ...
    def prod(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def ptp(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def ravel(self, order: str = ...): ...
    def repeat(self, repeats: Any, axis: Optional[Any] = ...): ...
    def reshape(self, shape: Any, order: str = ..., axistags: Optional[Any] = ...): ...
    def resize(self, new_shape: Any, refcheck: bool = ..., order: bool = ..., axistags: Optional[Any] = ...) -> None: ...
    def squeeze(self): ...
    def std(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., ddof: int = ...): ...
    def sum(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def swapaxes(self, i: Any, j: Any, keepTags: bool = ...): ...
    def take(self, indices: Any, axis: Optional[Any] = ..., out: Optional[Any] = ..., mode: str = ...): ...
    def transpose(self, *axes: Any, **keepTags: Any): ...
    def var(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., ddof: int = ...): ...
    def __abs__(self): ...
    def __add__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __div__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __floordiv__(self, other: Any): ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __invert__(self): ...
    def __le__(self, other: Any) -> Any: ...
    def __lshift__(self, other: Any): ...
    def __lt__(self, other: Any) -> Any: ...
    def __mod__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __ne__(self, other: Any) -> Any: ...
    def __neg__(self): ...
    def __or__(self, other: Any): ...
    def __pos__(self): ...
    def __pow__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __rdivmod__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __rlshift__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __rrshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __rxor__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __xor__(self, other: Any): ...

def Image(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def ScalarImage(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector2Image(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector3Image(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector4Image(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def RGBImage(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Volume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def ScalarVolume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector2Volume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector3Volume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector4Volume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def Vector6Volume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...
def RGBVolume(obj: Any, dtype: Any = ..., order: Optional[Any] = ..., init: bool = ..., value: Optional[Any] = ..., axistags: Optional[Any] = ...): ...

class ImagePyramid(list):
    def __init__(self, image: Any, copyImageToLevel: int = ..., lowestLevel: int = ..., highestLevel: int = ...) -> None: ...
    @property
    def lowestLevel(self): ...
    @property
    def highestLevel(self): ...
    @property
    def ndim(self): ...
    @property
    def dtype(self): ...
    @property
    def channelIndex(self): ...
    @property
    def axistags(self): ...
    def __getitem__(self, level: Any): ...
    def __setitem__(self, level: Any, image: Any) -> None: ...
    def expandImpl(self, src: Any, dest: Any, centerValue: Any) -> None: ...
    def reduce(self, srcLevel: Any, destLevel: Any, centerValue: float = ...) -> None: ...
    def expand(self, srcLevel: Any, destLevel: Any, centerValue: float = ...) -> None: ...
    def reduceLaplacian(self, srcLevel: Any, destLevel: Any, centerValue: float = ...) -> None: ...
    def expandLaplacian(self, srcLevel: Any, destLevel: Any, centerValue: float = ...) -> None: ...
    def createLevel(self, level: Any) -> None: ...
