import Boost.Python

def resampleImage(*args, **kwargs) -> Any: ...
def resamplingGaussian(image, 
sigmaX = ..., derivativeOrderX = ..., samplingRatioX = ..., offsetX = ..., 
sigmaY = ..., derivativeOrderY = ..., samplingRatioY = ..., offsetY = ..., 
out = ...) -> Any: ...
def resize(*args, **kwargs) -> Any: ...
def resizeImageCatmullRomInterpolation(*args, **kwargs) -> Any: ...
def resizeImageCoscotInterpolation(*args, **kwargs) -> Any: ...
def resizeImageLinearInterpolation(*args, **kwargs) -> Any: ...
def resizeImageNoInterpolation(*args, **kwargs) -> Any: ...
def resizeImageSplineInterpolation(*args, **kwargs) -> Any: ...
def resizeVolumeSplineInterpolation(*args, **kwargs) -> Any: ...
def rotateImageDegree(*args, **kwargs) -> Any: ...
def rotateImageRadiant(*args, **kwargs) -> Any: ...
def rotateImageSimple(*args, **kwargs) -> Any: ...

class ImagePyramid(list):
    __init__: Any = ...
    createLevel: Any = ...
    expand: Any = ...
    expandImpl: Any = ...
    expandLaplacian: Any = ...
    reduce: Any = ...
    reduceLaplacian: Any = ...
    __getitem__: Any = ...
    __setitem__: Any = ...
    @property
    def axistags(self) -> Any: ...
    @property
    def channelIndex(self) -> Any: ...
    @property
    def dtype(self) -> Any: ...
    @property
    def highestLevel(self) -> Any: ...
    @property
    def lowestLevel(self) -> Any: ...
    @property
    def ndim(self) -> Any: ...

class RotationDirection(Boost.Python.enum):
    CLOCKWISE: Any = ...
    COUNTER_CLOCKWISE: Any = ...
    UPSIDE_DOWN: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class SplineImageView0(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView1(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView2(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView3(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView3V3(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView4(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SplineImageView5(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coefficientImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dx(x, y) -> value: ...
    @classmethod
    def dx3(x, y) -> value: ...
    @classmethod
    def dx3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxx(x, y) -> value: ...
    @classmethod
    def dxxImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxxy(x, y) -> value: ...
    @classmethod
    def dxxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxy(x, y) -> value: ...
    @classmethod
    def dxyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dxyy(x, y) -> value: ...
    @classmethod
    def dxyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dy(x, y) -> value: ...
    @classmethod
    def dy3(x, y) -> value: ...
    @classmethod
    def dy3Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dyy(x, y) -> value: ...
    @classmethod
    def dyyImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def facetCoefficients(x, y) -> matrix: ...
    @classmethod
    def g2(x, y) -> value: ...
    @classmethod
    def g2Image(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2x(x, y) -> value: ...
    @classmethod
    def g2xImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def g2y(x, y) -> value: ...
    @classmethod
    def g2yImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def height(self, *args, **kwargs) -> Any: ...
    @classmethod
    def interpolatedImage(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isInside(x, y) -> bool: ...
    @classmethod
    def isValid(x, y) -> bool: ...
    @classmethod
    def shape(self, *args, **kwargs) -> Any: ...
    @classmethod
    def size(self, *args, **kwargs) -> Any: ...
    @classmethod
    def width(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
