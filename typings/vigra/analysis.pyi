from typing import overload
import Boost.Python
supportedConvexHullFeatures: Any
supportedFeatures: Any
supportedRegionFeatures: Any
supportedSkeletonFeatures: Any
watershedsReoptimization: Any
watershedsUnionFind: Any
wsDtSegmentation: Any

def applyMapping(*args, **kwargs) -> Any: ...
def beautifyCrackEdgeImage(*args, **kwargs) -> Any: ...
def cannyEdgeImage(*args, **kwargs) -> Any: ...
def cannyEdgeImageWithThinning(*args, **kwargs) -> Any: ...
@overload
def cannyEdgelList(gradient, threshold) -> list: ...
@overload
def cannyEdgelList(image, scale, threshold) -> list: ...
@overload
def cannyEdgelList3x3(gradient, threshold) -> list: ...
@overload
def cannyEdgelList3x3(image, scale, threshold) -> list: ...
def closeGapsInCrackEdgeImage(*args, **kwargs) -> Any: ...
def cornernessBeaudet(*args, **kwargs) -> Any: ...
def cornernessBoundaryTensor(*args, **kwargs) -> Any: ...
def cornernessFoerstner(*args, **kwargs) -> Any: ...
def cornernessHarris(*args, **kwargs) -> Any: ...
def cornernessRohr(*args, **kwargs) -> Any: ...
def extendedLocalMaxima(*args, **kwargs) -> Any: ...
def extendedLocalMaxima3D(*args, **kwargs) -> Any: ...
def extendedLocalMinima(*args, **kwargs) -> Any: ...
def extendedLocalMinima3D(*args, **kwargs) -> Any: ...
def extract2DConvexHullFeatures(*args, **kwargs) -> Any: ...
def extract3DConvexHullFeatures(*args, **kwargs) -> Any: ...
def extractFeatures(*args, **kwargs) -> Any: ...
def extractRegionFeatures(*args, **kwargs) -> Any: ...
def extractSkeletonFeatures(*args, **kwargs) -> Any: ...
def labelImage(*args, **kwargs) -> Any: ...
def labelImageWithBackground(*args, **kwargs) -> Any: ...
def labelMultiArray(*args, **kwargs) -> Any: ...
def labelMultiArrayWithBackground(*args, **kwargs) -> Any: ...
def labelVolume(*args, **kwargs) -> Any: ...
def labelVolumeWithBackground(*args, **kwargs) -> Any: ...
def localMaxima(*args, **kwargs) -> Any: ...
def localMaxima3D(*args, **kwargs) -> Any: ...
def localMinima(*args, **kwargs) -> Any: ...
def localMinima3D(*args, **kwargs) -> Any: ...
def regionImageToCrackEdgeImage(*args, **kwargs) -> Any: ...
def regionImageToEdgeImage(*args, **kwargs) -> Any: ...
def relabelConsecutive(*args, **kwargs) -> Any: ...
def removeShortEdges(*args, **kwargs) -> Any: ...
def segToSeeds(*args, **kwargs) -> Any: ...
def shenCastanCrackEdgeImage(*args, **kwargs) -> Any: ...
def shenCastanEdgeImage(*args, **kwargs) -> Any: ...
def sizeFilterSegInplace(*args, **kwargs) -> Any: ...
def slicSuperpixels(*args, **kwargs) -> Any: ...
def unionFindWatershed3D(*args, **kwargs) -> Any: ...
def unique(*args, **kwargs) -> Any: ...
def watersheds(*args, **kwargs) -> Any: ...
def watershedsNew(*args, **kwargs) -> Any: ...

class Edgel(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
    @property
    def orientation(self) -> Any: ...
    @orientation.setter
    def orientation(self, val: Any) -> None: ...
    @property
    def strength(self) -> Any: ...
    @strength.setter
    def strength(self, val: Any) -> None: ...
    @property
    def x(self) -> Any: ...
    @x.setter
    def x(self, val: Any) -> None: ...
    @property
    def y(self) -> Any: ...
    @y.setter
    def y(self, val: Any) -> None: ...

class FeatureAccumulator(Boost.Python.instance):
    has_key: Any = ...
    items: Any = ...
    iteritems: Any = ...
    iterkeys: Any = ...
    itervalues: Any = ...
    values: Any = ...
    __contains__: Any = ...
    __iter__: Any = ...
    __len__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def activeFeatures(self, *args, **kwargs) -> Any: ...
    @classmethod
    def createAccumulator(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isActive(self, *args, **kwargs) -> Any: ...
    @classmethod
    def keys(self, *args, **kwargs) -> Any: ...
    @classmethod
    def merge(self, *args, **kwargs) -> Any: ...
    @classmethod
    def supportedFeatures(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class RegionFeatureAccumulator(Boost.Python.instance):
    has_key: Any = ...
    items: Any = ...
    iteritems: Any = ...
    iterkeys: Any = ...
    itervalues: Any = ...
    values: Any = ...
    __contains__: Any = ...
    __iter__: Any = ...
    __len__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def activeFeatures(self, *args, **kwargs) -> Any: ...
    @classmethod
    def createAccumulator(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isActive(self, *args, **kwargs) -> Any: ...
    @classmethod
    def keys(self, *args, **kwargs) -> Any: ...
    @classmethod
    def maxRegionLabel(self, *args, **kwargs) -> Any: ...
    @classmethod
    def merge(self, *args, **kwargs) -> Any: ...
    @classmethod
    def supportedFeatures(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SRGType(Boost.Python.enum):
    CompleteGrow: Any = ...
    KeepContours: Any = ...
    StopAtThreshold: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...
