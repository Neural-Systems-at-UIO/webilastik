"""
This type stub file was generated by pyright.
"""

from . import base
from .base import with_phil

"""
    Implements support for HDF5"""
class DimensionProxy(base.CommonStateObject):
    """
        Represents an HDF5 "dim"""
    @property
    @with_phil
    def label(self): # -> Any | Literal['']:
        """ Get or set the dimension scale """
        ...
    
    @label.setter
    @with_phil
    def label(self, val): # -> None:
        ...
    
    @with_phil
    def __init__(self, id_, dimension) -> None:
        ...
    
    @with_phil
    def __hash__(self) -> int:
        ...
    
    @with_phil
    def __eq__(self, other) -> bool:
        ...
    
    @with_phil
    def __iter__(self): # -> Generator[Unknown | None, None, None]:
        ...
    
    @with_phil
    def __len__(self):
        ...
    
    @with_phil
    def __getitem__(self, item): # -> Dataset:
        ...
    
    def attach_scale(self, dset): # -> None:
        """ Attach a scale to this dimensio"""
        ...
    
    def detach_scale(self, dset): # -> None:
        """ Remove a scale from this dimens"""
        ...
    
    def items(self): # -> list[tuple[Unknown | None, Dataset]]:
        """ Get a list of (name, Dataset) p"""
        ...
    
    def keys(self): # -> list[Unknown | None]:
        """ Get a list of names for the sca"""
        ...
    
    def values(self): # -> list[Dataset]:
        """ Get a list of Dataset for scale"""
        ...
    
    @with_phil
    def __repr__(self): # -> str:
        ...
    


class DimensionManager(base.CommonStateObject):
    """
        Represents a collection"""
    @with_phil
    def __init__(self, parent) -> None:
        """ Private constructor.
        """
        ...
    
    @with_phil
    def __getitem__(self, index): # -> DimensionProxy:
        """ Return a Dimension object
     """
        ...
    
    @with_phil
    def __len__(self): # -> int:
        """ Number of dimensions associated"""
        ...
    
    @with_phil
    def __iter__(self): # -> Generator[DimensionProxy, None, None]:
        """ Iterate over the dimensions. """
        ...
    
    @with_phil
    def __repr__(self): # -> str:
        ...
    
    def create_scale(self, dset, name=...): # -> None:
        """ Create a new dimension, from an"""
        ...
    


