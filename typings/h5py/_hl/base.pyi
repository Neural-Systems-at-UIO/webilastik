"""
This type stub file was generated by pyright.
"""

import six
from .._objects import with_phil
from typing import Any, Optional

"""
    Implements operations common to all high-level objects (File, etc.).
"""
def is_hdf5(fname):
    """ Determine if a file is valid HDF5 (False if it doesn't exist). """
    ...

def guess_dtype(data):
    """ Attempt to guess an appropriate dtype for the object, returning None
    if nothing is appropriate (or if it should be left up the the array
    constructor to figure out)
    """
    ...

def default_lapl():
    """ Default link access property list """
    ...

def default_lcpl():
    """ Default link creation property list """
    ...

dlapl = default_lapl()
dlcpl = default_lcpl()
def is_empty_dataspace(obj):
    """ Check if an object's dataspace is empty """
    ...

class CommonStateObject(object):
    """
        Mixin class that allows sharing information between objects which
        reside in the same HDF5 file.  Requires that the host class have
        a ".id" attribute which returns a low-level ObjectID subclass.

        Also implements Unicode operations.
    """
    @property
    def _lapl(self):
        """ Fetch the link access property list appropriate for this object
        """
        ...
    
    @property
    def _lcpl(self):
        """ Fetch the link creation property list appropriate for this object
        """
        ...
    
    def _e(self, name, lcpl: Optional[Any] = ...):
        """ Encode a name according to the current file settings.

        Returns name, or 2-tuple (name, lcpl) if lcpl is True

        - Binary strings are always passed as-is, h5t.CSET_ASCII
        - Unicode strings are encoded utf8, h5t.CSET_UTF8

        If name is None, returns either None or (None, None) appropriately.
        """
        ...
    
    def _d(self, name):
        """ Decode a name according to the current file settings.

        - Try to decode utf8
        - Failing that, return the byte string

        If name is None, returns None.
        """
        ...
    


class _RegionProxy(object):
    """
        Proxy object which handles region references.

        To create a new region reference (datasets only), use slicing syntax:

            >>> newref = obj.regionref[0:10:2]

        To determine the target dataset shape from an existing reference:

            >>> shape = obj.regionref.shape(existingref)

        where <obj> may be any object in the file. To determine the shape of
        the selection in use on the target dataset:

            >>> selection_shape = obj.regionref.selection(existingref)
    """
    def __init__(self, obj):
        self.id = ...
    
    def __getitem__(self, args):
        ...
    
    def shape(self, ref):
        """ Get the shape of the target dataspace referred to by *ref*. """
        ...
    
    def selection(self, ref):
        """ Get the shape of the target dataspace selection referred to by *ref*
        """
        ...
    


class HLObject(CommonStateObject):
    """
        Base class for high-level interface objects.
    """
    @property
    def file(self):
        """ Return a File instance associated with this object """
        ...
    
    @property
    @with_phil
    def name(self):
        """ Return the full name of this object.  None if anonymous. """
        ...
    
    @property
    @with_phil
    def parent(self):
        """Return the parent group of this object.

        This is always equivalent to obj.file[posixpath.dirname(obj.name)].
        ValueError if this object is anonymous.
        """
        ...
    
    @property
    @with_phil
    def id(self):
        """ Low-level identifier appropriate for this object """
        ...
    
    @property
    @with_phil
    def ref(self):
        """ An (opaque) HDF5 reference to this object """
        ...
    
    @property
    @with_phil
    def regionref(self):
        """Create a region reference (Datasets only).

        The syntax is regionref[<slices>]. For example, dset.regionref[...]
        creates a region reference in which the whole dataset is selected.

        Can also be used to determine the shape of the referenced dataset
        (via .shape property), or the shape of the selection (via the
        .selection property).
        """
        ...
    
    @property
    def attrs(self):
        """ Attributes attached to this object """
        ...
    
    @with_phil
    def __init__(self, oid):
        """ Setup this object, given its low-level identifier """
        ...
    
    @with_phil
    def __hash__(self):
        ...
    
    @with_phil
    def __eq__(self, other):
        ...
    
    @with_phil
    def __ne__(self, other):
        ...
    
    def __bool__(self):
        ...
    
    __nonzero__ = ...
    def __getnewargs__(self):
        """Disable pickle.

        Handles for HDF5 objects can't be reliably deserialised, because the
        recipient may not have access to the same files. So we do this to
        fail early.

        If you really want to pickle h5py objects and can live with some
        limitations, look at the h5pickle project on PyPI.
        """
        ...
    
    def __getstate__(self):
        ...
    


class KeysViewHDF5(KeysView):
    def __str__(self):
        ...
    
    __repr__ = ...


class ValuesViewHDF5(ValuesView):
    """
        Wraps e.g. a Group or AttributeManager to provide a value view.

        Note that __contains__ will have poor performance as it has
        to scan all the links or attributes.
    """
    def __contains__(self, value):
        ...
    
    def __iter__(self):
        ...
    


class ItemsViewHDF5(ItemsView):
    """
        Wraps e.g. a Group or AttributeManager to provide an items view.
    """
    def __contains__(self, item):
        ...
    
    def __iter__(self):
        ...
    


class MappingHDF5(Mapping):
    """
        Wraps a Group, AttributeManager or DimensionManager object to provide
        an immutable mapping interface.

        We don't inherit directly from MutableMapping because certain
        subclasses, for example DimensionManager, are read-only.
    """
    if six.PY2:
        def keys(self):
            """ Get a list containing member names """
            ...
        
        def values(self):
            """ Get a list containing member objects """
            ...
        
        def itervalues(self):
            """ Get an iterator over member objects """
            ...
        
        def items(self):
            """ Get a list of tuples containing (name, object) pairs """
            ...
        
        def iteritems(self):
            """ Get an iterator over (name, object) pairs """
            ...
        
    else:
        def keys(self):
            """ Get a view object on member names """
            ...
        
        def values(self):
            """ Get a view object on member objects """
            ...
        
        def items(self):
            """ Get a view object on member items """
            ...
        
    def _ipython_key_completions_(self):
        """ Custom tab completions for __getitem__ in IPython >=5.0. """
        ...
    


class MutableMappingHDF5(MappingHDF5, MutableMapping):
    """
        Wraps a Group or AttributeManager object to provide a mutable
        mapping interface, in contrast to the read-only mapping of
        MappingHDF5.
    """
    ...


class Empty(object):
    """
        Proxy object to represent empty/null dataspaces (a.k.a H5S_NULL).

        This can have an associated dtype, but has no shape or data. This is not
        the same as an array with shape (0,).
    """
    shape = ...
    size = ...
    def __init__(self, dtype):
        self.dtype = ...
    
    def __eq__(self, other):
        ...
    
    def __repr__(self):
        ...
    


