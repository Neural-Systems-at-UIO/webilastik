"""
This type stub file was generated by pyright.
"""

from collections.abc import ItemsView, KeysView, Mapping, MutableMapping, ValuesView
from h5py._hl.attrs import AttributeManager

from h5py._hl.files import File
from .._objects import with_phil

"""
    Implements operations commo"""
def is_hdf5(fname): # -> Literal[False]:
    """ Determine if a file is valid HD"""
    ...

def find_item_type(data): # -> Any | None:
    """Find the item type of a simple o"""
    ...

def guess_dtype(data): # -> None:
    """ Attempt to guess an appropriate"""
    ...

def is_float16_dtype(dt): # -> bool:
    ...

def array_for_new_object(data, specified_dtype=...): # -> NDArray[Unknown] | ndarray[Unknown, Unknown]:
    """Prepare an array from data used """
    ...

def default_lapl():
    """ Default link access property li"""
    ...

def default_lcpl():
    """ Default link creation property """
    ...

dlapl = ...
dlcpl = ...
def is_empty_dataspace(obj): # -> bool:
    """ Check if an object's dataspace """
    ...

class CommonStateObject:
    """
        Mixin class that allows"""
    ...


class _RegionProxy:
    """
        Proxy object which hand"""
    def __init__(self, obj) -> None:
        ...

    def __getitem__(self, args):
        ...

    def shape(self, ref):
        """ Get the shape of the target dat"""
        ...

    def selection(self, ref): # -> tuple[_T_co@tuple] | tuple[int, ...] | tuple[Unknown] | tuple[Unknown | Literal[1], ...] | None:
        """ Get the shape of the target dat"""
        ...



class HLObject(CommonStateObject):
    """
        Base class for high-lev"""
    @property
    def file(self) -> File:
        """ Return a File instance associat"""
        ...

    @property
    @with_phil
    def name(self): # -> None:
        """ Return the full name of this ob"""
        ...

    @property
    @with_phil
    def parent(self): # -> Group | Dataset | Datatype:
        """Return the parent group of this """
        ...

    @property
    @with_phil
    def id(self):
        """ Low-level identifier appropriat"""
        ...

    @property
    @with_phil
    def ref(self):
        """ An (opaque) HDF5 reference to t"""
        ...

    @property
    @with_phil
    def regionref(self): # -> _RegionProxy:
        """Create a region reference (Datas"""
        ...

    @property
    def attrs(self) -> AttributeManager:
        """ Attributes attached to this obj"""
        ...

    @with_phil
    def __init__(self, oid) -> None:
        """ Setup this object, given its lo"""
        ...

    @with_phil
    def __hash__(self) -> int:
        ...

    @with_phil
    def __eq__(self, other) -> bool:
        ...

    def __bool__(self): # -> bool:
        ...

    __nonzero__ = ...
    def __getnewargs__(self):
        """Disable pickle.

        Handles"""
        ...

    def __getstate__(self):
        ...



class KeysViewHDF5(KeysView):
    def __str__(self) -> str:
        ...

    def __reversed__(self): # -> Generator[Unknown, None, None]:
        ...

    __repr__ = ...


class ValuesViewHDF5(ValuesView):
    """
        Wraps e.g. a Group or A"""
    def __contains__(self, value): # -> bool:
        ...

    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...

    def __reversed__(self): # -> Generator[Unknown, None, None]:
        ...



class ItemsViewHDF5(ItemsView):
    """
        Wraps e.g. a Group or A"""
    def __contains__(self, item): # -> Literal[False]:
        ...

    def __iter__(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...

    def __reversed__(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...



class MappingHDF5(Mapping):
    """
        Wraps a Group, Attribut"""
    def keys(self): # -> KeysViewHDF5:
        """ Get a view object on member nam"""
        ...

    def values(self): # -> ValuesViewHDF5:
        """ Get a view object on member obj"""
        ...

    def items(self): # -> ItemsViewHDF5:
        """ Get a view object on member ite"""
        ...



class MutableMappingHDF5(MappingHDF5, MutableMapping):
    """
        Wraps a Group or Attrib"""
    ...


class Empty:
    """
        Proxy object to represe"""
    shape = ...
    size = ...
    def __init__(self, dtype) -> None:
        ...

    def __eq__(self, other) -> bool:
        ...

    def __repr__(self): # -> str:
        ...



def product(nums): # -> Literal[1]:
    """Calculate a numeric product

   """
    ...

