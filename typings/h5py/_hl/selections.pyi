"""
This type stub file was generated by pyright.
"""

"""
    High-level access to HDF5 d"""
def select(shape, args, dataset=...): # -> Selection | PointSelection:
    """ High-level routine to generate """
    ...

class Selection:
    """
        Base class for HDF5 dat"""
    def __init__(self, shape, spaceid=...) -> None:
        """ Create a selection.  Shape may """
        ...
    
    @property
    def id(self):
        """ SpaceID instance """
        ...
    
    @property
    def shape(self): # -> tuple[_T_co@tuple]:
        """ Shape of whole dataspace """
        ...
    
    @property
    def nselect(self):
        """ Number of elements currently se"""
        ...
    
    @property
    def mshape(self): # -> tuple[Unknown]:
        """ Shape of selection (always 1-D """
        ...
    
    @property
    def array_shape(self): # -> tuple[Unknown]:
        """Shape of array to read/write (al"""
        ...
    
    def expand_shape(self, source_shape):
        ...
    
    def broadcast(self, source_shape): # -> Generator[Unknown, None, None]:
        """ Get an iterable for broadcastin"""
        ...
    
    def __getitem__(self, args):
        ...
    


class PointSelection(Selection):
    """
        Represents a point-wise"""
    def __init__(self, shape, spaceid=..., points=...) -> None:
        ...
    
    @classmethod
    def from_mask(cls, mask, spaceid=...): # -> Self@PointSelection:
        """Create a point-wise selection fr"""
        ...
    
    def append(self, points): # -> None:
        """ Add the sequence of points to t"""
        ...
    
    def prepend(self, points): # -> None:
        """ Add the sequence of points to t"""
        ...
    
    def set(self, points): # -> None:
        """ Replace the current selection w"""
        ...
    


class SimpleSelection(Selection):
    """ A single "rectangular" (regular"""
    @property
    def mshape(self): # -> tuple[_T_co@tuple]:
        """ Shape of current selection """
        ...
    
    @property
    def array_shape(self): # -> tuple[Unknown, ...]:
        ...
    
    def __init__(self, shape, spaceid=..., hyperslab=...) -> None:
        ...
    
    def expand_shape(self, source_shape): # -> tuple[Unknown, ...]:
        """Match the dimensions of an array"""
        ...
    
    def broadcast(self, source_shape): # -> Generator[Unknown, None, None]:
        """ Return an iterator over target """
        ...
    


class FancySelection(Selection):
    """
        Implements advanced Num"""
    @property
    def mshape(self): # -> tuple[_T_co@tuple]:
        ...
    
    @property
    def array_shape(self): # -> tuple[_T_co@tuple]:
        ...
    
    def __init__(self, shape, spaceid=..., mshape=..., array_shape=...) -> None:
        ...
    
    def expand_shape(self, source_shape):
        ...
    
    def broadcast(self, source_shape): # -> Generator[Unknown, None, None]:
        ...
    


def guess_shape(sid): # -> tuple[_T_co@tuple] | tuple[int, ...] | tuple[Unknown] | tuple[Unknown | Literal[1], ...] | None:
    """ Given a dataspace, try to deduc"""
    ...

