"""
This type stub file was generated by pyright.
"""

from .base import with_phil
from .group import Group
from .. import h5

"""
    Implements high-level suppo"""
mpi = ...
ros3 = ...
hdf5_version = ...
swmr_support = ...
if hdf5_version >= h5.get_config().swmr_min_hdf5_version:
    swmr_support = ...
libver_dict = ...
libver_dict_r = ...
if hdf5_version >= (1, 10, 2):
    ...
if hdf5_version >= (1, 11, 4):
    ...
if hdf5_version >= (1, 13, 0):
    ...
_drivers = ...
if ros3:
    ...
def register_driver(name, set_fapl): # -> None:
    """Register a custom driver.

    P"""
    ...

def unregister_driver(name): # -> None:
    """Unregister a custom driver.

   """
    ...

def registered_drivers(): # -> frozenset[str]:
    """Return a frozenset of the names """
    ...

def make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0, locking, page_buf_size, min_meta_keep, min_raw_keep, **kwds):
    """ Set up a file access property l"""
    ...

def make_fcpl(track_order=..., fs_strategy=..., fs_persist=..., fs_threshold=..., fs_page_size=...): # -> None:
    """ Set up a file creation property"""
    ...

def make_fid(name, mode, userblock_size, fapl, fcpl=..., swmr=...):
    """ Get a new FileID by opening or """
    ...

class File(Group):
    """
        Represents an HDF5 file"""
    @property
    def attrs(self): # -> AttributeManager:
        """ Attributes attached to this obj"""
        ...

    @property
    @with_phil
    def filename(self) -> str:
        """File name on disk"""
        ...

    @property
    @with_phil
    def driver(self): # -> str:
        """Low-level HDF5 file driver used """
        ...

    @property
    @with_phil
    def mode(self): # -> Literal['r+', 'r']:
        """ Python mode used to open file """
        ...

    @property
    @with_phil
    def libver(self): # -> tuple[str, ...]:
        """File format version bounds (2-tu"""
        ...

    @property
    @with_phil
    def userblock_size(self):
        """ User block size (in bytes) """
        ...

    if mpi and hdf5_version >= (1, 8, 9):
        @property
        @with_phil
        def atomic(self):
            """ Set/get MPI-IO atomic mode
    """
            ...

        @atomic.setter
        @with_phil
        def atomic(self, value): # -> None:
            ...

    @property
    @with_phil
    def swmr_mode(self): # -> bool:
        """ Controls single-writer multiple"""
        ...

    @swmr_mode.setter
    @with_phil
    def swmr_mode(self, value): # -> None:
        ...

    def __init__(self, name, mode=..., driver=..., libver=..., userblock_size=..., swmr=..., rdcc_nslots=..., rdcc_nbytes=..., rdcc_w0=..., track_order=..., fs_strategy=..., fs_persist=..., fs_threshold=..., fs_page_size=..., page_buf_size=..., min_meta_keep=..., min_raw_keep=..., locking=..., **kwds) -> None:
        """Create a new file object.

     """
        ...

    def close(self) -> None:
        """ Close the file.  All open objec"""
        ...

    def flush(self): # -> None:
        """ Tell the HDF5 library to flush """
        ...

    @with_phil
    def __enter__(self) -> "File":
        ...

    @with_phil
    def __exit__(self, *args): # -> None:
        ...

    @with_phil
    def __repr__(self): # -> str:
        ...



